name: AI Agent Preview Deploy

on:
  workflow_call:
    inputs:
      firebase_project:
        description: "Firebase project ID"
        required: true
        type: string
      default_app:
        description: "Default app name (for single-app repos)"
        required: false
        type: string
      default_target:
        description: "Default Firebase hosting target (for single-app repos)"
        required: false
        type: string
      base_branch:
        description: "Base branch for change detection"
        required: false
        type: string
        default: "main"
      site_mappings:
        description: 'JSON mapping NX app names to Firebase site IDs (e.g., {"web-app":"my-project-web","admin-app":"my-project-admin"})'
        required: false
        type: string
      comment_on_issue:
        description: "Whether to comment preview URL on linked GitHub issues"
        required: false
        type: boolean
        default: true
      node_version:
        description: "Node.js version"
        required: false
        type: string
        default: "20"
      build_command:
        description: "Custom build command (defaults to 'npm run build')"
        required: false
        type: string
    secrets:
      firebase_service_account:
        description: "Firebase service account JSON"
        required: true
      npm_token:
        description: "NPM token for private package access"
        required: false

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js (with GitHub Packages)
        if: ${{ secrets.npm_token != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"
          registry-url: "https://npm.pkg.github.com"

      - name: Setup Node.js (public packages only)
        if: ${{ secrets.npm_token == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

      - name: Verify Firebase credentials
        run: |
          if [ -z "${{ secrets.firebase_service_account }}" ]; then
            echo "Error: FIREBASE_SERVICE_ACCOUNT secret is not set or empty"
            echo "Please ensure you have added the Firebase service account JSON as a repository secret"
            exit 1
          fi
          echo "Firebase service account secret is configured"

      - name: Validate inputs
        run: |
          # Validate site_mappings JSON if provided
          if [ -n "${{ inputs.site_mappings }}" ]; then
            echo "Validating site_mappings JSON..."
            if ! echo '${{ inputs.site_mappings }}' | jq empty > /dev/null 2>&1; then
              echo "Error: Invalid JSON in site_mappings parameter"
              echo "Provided: ${{ inputs.site_mappings }}"
              exit 1
            fi
            echo "Site mappings JSON is valid"
          fi

          # Validate single-app configuration if no apps directory
          if [ ! -d "apps" ]; then
            if [ -z "${{ inputs.default_app }}" ] || [ -z "${{ inputs.default_target }}" ]; then
              echo "Error: For single-app repos, both default_app and default_target inputs are required"
              echo "Provided default_app: '${{ inputs.default_app }}'"
              echo "Provided default_target: '${{ inputs.default_target }}'"
              exit 1
            fi
            echo "Single-app configuration is valid"
          fi

          # Validate build system detection
          if [ -z "${{ inputs.build_command }}" ]; then
            echo "Checking for build system..."
            if [ ! -f "nx.json" ] && [ ! -f "angular.json" ] && ! grep -q "\"build\":" package.json 2>/dev/null; then
              echo "Error: No build system detected and no custom build_command provided"
              echo "Expected one of:"
              echo "  - nx.json (for NX)"
              echo "  - angular.json (for Angular CLI)"
              echo "  - 'build' script in package.json"
              echo "  - Custom build_command input"
              exit 1
            fi
            echo "Build system detected"
          fi

      - name: Extract agent info and determine app
        id: agent
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          AGENT_NAME=$(echo "$BRANCH_NAME" | cut -d'/' -f1)
          echo "name=$AGENT_NAME" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Determine which app to build based on changed files
          BASE_BRANCH="${{ inputs.base_branch }}"
          git fetch origin $BASE_BRANCH --depth=50
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH..HEAD)

          # Default configuration
          DEFAULT_SITE_ID="${{ inputs.firebase_project }}"

          # Multi-app detection (if apps directory exists)
          if [ -d "apps" ]; then
            # Count changes in different app directories
            APP=""
            TARGET=""
            max_changes=0
            for app_dir in apps/*/; do
              if [ -d "$app_dir" ]; then
                app_name=$(basename "$app_dir")
                changes=$(echo "$CHANGED_FILES" | grep -c "apps/$app_name" || true)
                echo "Changes in $app_name: $changes"
                
                # Use the app with the most changes
                if [ "$changes" -gt "$max_changes" ]; then
                  max_changes="$changes"
                  APP="$app_name"
                  TARGET="$app_name"
                fi
              fi
            done
            
            # If no app changes detected, skip deployment
            if [ -z "$APP" ]; then
              echo "No app changes detected in apps/ directory. Skipping deployment."
              echo "app=SKIP" >> $GITHUB_OUTPUT
              echo "target=SKIP" >> $GITHUB_OUTPUT
              echo "site_id=SKIP" >> $GITHUB_OUTPUT
              echo "channel_id=SKIP" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            # Single-app repository - use configured defaults
            APP="${{ inputs.default_app }}"
            TARGET="${{ inputs.default_target }}"
            
            if [ -z "$APP" ] || [ -z "$TARGET" ]; then
              echo "For single-app repos, default_app and default_target inputs are required."
              exit 1
            fi
          fi

          # Set site ID (check mappings first, then fall back to project ID)
          SITE_ID="$DEFAULT_SITE_ID"
          if [ -n "${{ inputs.site_mappings }}" ] && [ -n "$APP" ]; then
            # Parse JSON mappings to find site ID for this app
            if echo '${{ inputs.site_mappings }}' | jq empty > /dev/null 2>&1; then
              MAPPED_SITE=$(echo '${{ inputs.site_mappings }}' | jq -r --arg app "$APP" '.[$app] // empty')
              if [ -n "$MAPPED_SITE" ] && [ "$MAPPED_SITE" != "null" ] && [ "$MAPPED_SITE" != "empty" ]; then
                SITE_ID="$MAPPED_SITE"
                echo "Using mapped site ID for $APP: $SITE_ID"
              fi
            else
              echo "Warning: Invalid JSON in site_mappings, using default site ID"
            fi
          fi

          echo "app=$APP" >> $GITHUB_OUTPUT
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "site_id=$SITE_ID" >> $GITHUB_OUTPUT
          echo "channel_id=${AGENT_NAME}-preview" >> $GITHUB_OUTPUT

          echo "Using app: $APP, target: $TARGET, site: $SITE_ID"

      - name: Check for existing build artifacts
        if: steps.agent.outputs.app != 'SKIP'
        run: |
          echo "Checking for existing build artifacts..."
          
          # Common build output directories
          if [ -d "dist" ]; then
            echo "Found dist/ directory"
            ls -la dist/
          elif [ -d "build" ]; then
            echo "Found build/ directory"
            ls -la build/
          elif [ -d "out" ]; then
            echo "Found out/ directory"
            ls -la out/
          else
            echo "No build artifacts found - will attempt to build if possible"
            echo "Contents of current directory:"
            ls -la
          fi

      - name: Build app
        if: steps.agent.outputs.app != 'SKIP'
        run: |
          echo "Building ${{ steps.agent.outputs.app }}..."

          BUILD_COMMAND="${{ inputs.build_command }}"
          if [ -z "$BUILD_COMMAND" ]; then
            BUILD_COMMAND="npm run build"
          else
            # Replace placeholders in custom build command
            BUILD_COMMAND=$(echo "$BUILD_COMMAND" | sed "s/\$APP/${{ steps.agent.outputs.app }}/g")
            BUILD_COMMAND=$(echo "$BUILD_COMMAND" | sed "s/\$TARGET/${{ steps.agent.outputs.target }}/g")
          fi

          echo "Running: $BUILD_COMMAND"
          $BUILD_COMMAND

          # Clean up Windows Zone.Identifier files that cause issues
          find . -name "*.Zone.Identifier" -delete 2>/dev/null || true
          find . -name "*:*" -delete 2>/dev/null || true

      - name: Setup Firebase CLI
        if: steps.agent.outputs.app != 'SKIP'
        run: npm install -g firebase-tools

      - name: Authenticate to Firebase
        if: steps.agent.outputs.app != 'SKIP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.firebase_service_account }}
          create_credentials_file: true

      - name: Deploy Preview Channel
        if: steps.agent.outputs.app != 'SKIP'
        id: deploy
        run: |
          FIREBASE_PROJECT="${{ inputs.firebase_project }}"
          firebase use $FIREBASE_PROJECT

          DEPLOY_COMMAND="firebase hosting:channel:deploy ${{ steps.agent.outputs.channel_id }}"

          # Add hosting target if specified and not empty
          if [ -n "${{ steps.agent.outputs.target }}" ] && [ "${{ steps.agent.outputs.target }}" != "default" ] && [ "${{ steps.agent.outputs.target }}" != "" ]; then
            DEPLOY_COMMAND="$DEPLOY_COMMAND --only ${{ steps.agent.outputs.target }}"
          fi

          DEPLOY_COMMAND="$DEPLOY_COMMAND --expires 30d --json"

          echo "Running: $DEPLOY_COMMAND"
          $DEPLOY_COMMAND > deploy-output.json

          echo "=== Deploy Output ==="
          cat deploy-output.json
          echo "=== Extracting URL ==="

          SITE_ID="${{ steps.agent.outputs.site_id }}"
          PREVIEW_URL=$(cat deploy-output.json | jq -r --arg site_id "$SITE_ID" '
            (.result[$site_id].url // null) //
            (.result | to_entries | .[0].value.url // null) //
            (.result | keys_unsorted | .[0] as $key | .result[$key].url // null) //
            "URL_NOT_FOUND"
          ')
          echo "Extracted URL: $PREVIEW_URL"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Comment on linked issue
        if: ${{ inputs.comment_on_issue == true && steps.agent.outputs.app != 'SKIP' }}
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.agent.outputs.branch }}';
            const agentName = '${{ steps.agent.outputs.name }}';
            const issuePattern = `${agentName}\\/issue-(\\d+)-`;
            const issueMatch = branchName.match(new RegExp(issuePattern));

            if (issueMatch) {
              const issueNumber = parseInt(issueMatch[1]);
              const commentTemplate = `🚀 **Preview deployed!**\n\n📱 **App:** ${{ steps.agent.outputs.app }}\n🔗 **Preview URL:** ${{ steps.deploy.outputs.preview_url }}\n\n_Note: This preview updates with each new commit. Latest deployment from branch: \`${branchName}\`_`;
              
              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentTemplate
              });
              console.log(`Posted comment to issue #${issueNumber}`);
            } else {
              console.log(`Could not extract issue number from branch: ${branchName}`);
            }
